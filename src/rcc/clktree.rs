use core::marker::PhantomData;

pub trait Freq {
    fn freq(self) -> u32;
}

pub trait MuxableSrc<Mux> {
    fn src_mux(self) -> Mux;
}

/// The High-Speed External (HSE) clock.
#[derive(Copy, Clone)]
pub struct HseClk(pub u32);

impl Freq for HseClk {
    fn freq(self) -> u32 {
        self.0
    }
}

/// The High-Speed Internal (HSI) 16MHz clock.
#[derive(Copy, Clone)]
pub struct HsiClk;

impl Freq for HsiClk {
    fn freq(self) -> u32 {
        16_000_000
    }
}

/// The pll clock source.
#[derive(Copy, Clone)]
pub enum PllSrcMux {
    Hsi(HsiClk),
    Hse(HseClk),
}

impl PllSrcMux {
    pub const fn to_pllsrc(self, pll_m: u32) -> PllSrc {
        PllSrc {
            mux: self,
            m: pll_m,
        }
    }
}

impl Freq for PllSrcMux {
    fn freq(self) -> u32 {
        match self {
            PllSrcMux::Hsi(clk) => clk.freq(),
            PllSrcMux::Hse(clk) => clk.freq(),
        }
    }
}

/// The pll input clock (vcoin).
#[derive(Copy, Clone)]
pub struct PllSrc {
    /// The pll input clock source.
    pub mux: PllSrcMux,
    /// Pll source clock input division factor.
    /// vcoin = src / m
    pub m: u32,
}

impl PllSrc {
    pub const fn to_pll(self, pll_n: u32, pll_p: u32, pll_q: u32) -> Pll {
        let vco = PllVco {
            src: self,
            n: pll_n,
        };
        Pll {
            vco,
            p: PllClk {
                _out: PhantomData,
                src: vco,
                div: pll_p,
            },
            q: PllClk {
                _out: PhantomData,
                src: vco,
                div: pll_q,
            },
        }
    }
}

impl Freq for PllSrc {
    fn freq(self) -> u32 {
        self.mux.freq() / self.m
    }
}

impl MuxableSrc<PllSrcMux> for PllSrc {
    fn src_mux(self) -> PllSrcMux {
        self.mux
    }
}

/// The clocks generated by the pll.
/// pllp: pllclk = vcoin * n / p
/// pllq: vcoin * n / q
#[derive(Copy, Clone)]
pub struct PllVco {
    /// The pll input clock signal (vcoin).
    pub src: PllSrc,
    /// Pll multiplication factor for vco.
    /// vccout = vcoin * n
    pub n: u32,
}

impl Freq for PllVco {
    fn freq(self) -> u32 {
        (self.src.freq() / self.src.m) * self.n
    }
}

impl MuxableSrc<PllSrcMux> for PllVco {
    fn src_mux(self) -> PllSrcMux {
        self.src.src_mux()
    }
}

#[derive(Copy, Clone)]
pub struct PllP;
#[derive(Copy, Clone)]
pub struct PllQ;

/// A pll generated clock, e.g. PllClk<PllP> = vcoin * n / p
#[derive(Copy, Clone)]
pub struct PllClk<Out> {
    _out: PhantomData<Out>,
    src: PllVco,
    pub div: u32,
}

impl<Out> Freq for PllClk<Out> {
    fn freq(self) -> u32 {
        self.src.freq() / self.div
    }
}

pub struct Pll {
    pub vco: PllVco,
    /// Pll division factor for system clock.
    pub p: PllClk<PllP>,
    /// Pll division factor for usb, sdio, and rng.
    pub q: PllClk<PllQ>,
}

impl MuxableSrc<PllSrcMux> for Pll {
    fn src_mux(self) -> PllSrcMux {
        self.vco.src_mux()
    }
}

/// The system clock source.
#[derive(Copy, Clone)]
pub enum SysClkMux {
    Hsi(HsiClk),
    Hse(HseClk),
    Pll(PllClk<PllP>),
}

impl SysClkMux {
    pub const fn to_hclk(self, hpre: u32) -> HClk {
        HClk { mux: self, hpre }
    }
}

impl Freq for SysClkMux {
    fn freq(self) -> u32 {
        match self {
            SysClkMux::Hsi(clk) => clk.freq(),
            SysClkMux::Hse(clk) => clk.freq(),
            SysClkMux::Pll(clk) => clk.freq(),
        }
    }
}

/// The AHB (Advanced High-Performance Bus) and CPU clock.
#[derive(Copy, Clone)]
pub struct HClk {
    /// The clock source.
    mux: SysClkMux,
    /// The clock prescaler.
    /// hclk = sysclk / hpre
    hpre: u32,
}

impl HClk {
    pub const fn to_pclk1(self, ppre1: u32) -> PClk1 {
        PClk1 { src: self, ppre1 }
    }

    pub const fn to_pclk2(self, ppre2: u32) -> PClk2 {
        PClk2 { src: self, ppre2 }
    }
}

impl Freq for HClk {
    fn freq(self) -> u32 {
        self.mux.freq() / self.hpre
    }
}

impl MuxableSrc<SysClkMux> for HClk {
    fn src_mux(self) -> SysClkMux {
        self.mux
    }
}

/// The APB1 (Low Speed Advanced Peripheral Bus) peripheral clock.
#[derive(Copy, Clone)]
pub struct PClk1 {
    /// The clock source.
    src: HClk,
    /// The clock prescaler.
    /// pclk1 = hclk / ppre1
    ppre1: u32,
}

impl Freq for PClk1 {
    fn freq(self) -> u32 {
        self.src.freq() / self.ppre1
    }
}

/// The APB2 (High Speed Advanced Peripheral Bus) peripheral clock.
#[derive(Copy, Clone)]
pub struct PClk2 {
    src: HClk,
    /// The clock prescaler.
    /// pclk2 = hclk / ppre2
    ppre2: u32,
}

impl Freq for PClk2 {
    fn freq(self) -> u32 {
        self.src.freq() / self.ppre2
    }
}
